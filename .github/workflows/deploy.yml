name: Test & Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    env:
      TESTING: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'

      - name: Setup Python Virtual Environment
        run: python -m venv .venv

      - name: Install Dependencies
        run: .venv/bin/pip install -r requirements.txt

      - name: Run Tests
        run: ./run_test.sh

  deploy:
    name: "Deploy to VPS"
    runs-on: ubuntu-latest
    needs: test
    if: success() 
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_IP: ${{ secrets.SSH_IP }}
      PROJECT_ROOT: ${{ secrets.PROJECT_ROOT }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy-key.pem
          chmod 600 ~/.ssh/deploy-key.pem
          cat > ~/.ssh/config <<END
          Host my-vps
            HostName $SSH_IP
            User $SSH_USER
            IdentityFile ~/.ssh/deploy-key.pem
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_IP: ${{ secrets.SSH_IP }}

      - name: Print project root directory
        run: ssh my-vps 'cd ${{ secrets.PROJECT_ROOT }} && pwd'

      - name: Deploy site
        run: |
          echo "$PROJECT_ROOT"
          ssh my-vps "cd $PROJECT_ROOT && ls -la && ./redploy-site.sh && docker compose ps"
          
      - name: Notify Discord of success
        run: |
          curl -s -X POST "$DISCORD_WEBHOOK" -d "content=ðŸš€ Deployment Successful"

  notify-failure:
    name: "Notify on Failure"
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: failure()
    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

    steps:
      - name: Send failure message to Discord
        run: |
          curl -s -X POST "$DISCORD_WEBHOOK" -d "content=ðŸš¨ Deployment Failed"
